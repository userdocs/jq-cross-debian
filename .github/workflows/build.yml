name: jq crossbuild package release

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  cross_build:
    runs-on: ubuntu-latest
    outputs:
      jq_version: ${{ steps.version_info.outputs.jq_version }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          [
            amd64,
            arm64,
            armel,
            armhf,
            i386,
            mips,
            mips64,
            mips64el,
            mips64r6,
            mips64r6el,
            mipsel,
            mipsr6,
            mipsr6el,
            powerpc,
            ppc64el,
            riscv64,
            s390x,
          ]
        include:
          - arch: amd64
            CC: "x86_64-linux-gnu"
          - arch: arm64
            CC: "aarch64-linux-gnu"
          - arch: armel
            CC: "arm-linux-gnueabi"
          - arch: armhf
            CC: "arm-linux-gnueabihf"
          - arch: i386
            CC: "i686-linux-gnu"
          - arch: mips
            CC: "mips-linux-gnu"
          - arch: mips64
            CC: "mips64-linux-gnuabi64"
          - arch: mips64el
            CC: "mips64el-linux-gnuabi64"
          - arch: mips64r6
            CC: "mipsisa64r6-linux-gnuabi64"
          - arch: mips64r6el
            CC: "mipsisa64r6el-linux-gnuabi64"
          - arch: mipsel
            CC: "mipsel-linux-gnu"
          - arch: mipsr6
            CC: "mipsisa32r6-linux-gnu"
          - arch: mipsr6el
            CC: "mipsisa32r6el-linux-gnu"
          - arch: powerpc
            CC: "powerpc-linux-gnu"
          - arch: ppc64el
            CC: "powerpc64le-linux-gnu"
          - arch: riscv64
            CC: "riscv64-linux-gnu"
          - arch: s390x
            CC: "s390x-linux-gnu"

    name: jq ${{ matrix.arch }}

    env:
      github_branch: "master"
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    steps:
      - name: Host - Checkout action
        uses: actions/checkout@v3

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d -e LDFLAGS=-s -e AR=${{ matrix.CC }}-ar -e CHOST=${{ matrix.CC }} -e CC=${{ matrix.CC }}-gcc -e CPP=${{ matrix.CC }}-cpp -e CXX=${{ matrix.CC }}-g++ -v ${{ github.workspace }}:/root ubuntu:latest

      - name: Host - Git clone jq
        run: git clone --single-branch --branch "${{ env.github_branch }}" --shallow-submodules --recurse-submodules --depth 1 https://github.com/jqlang/jq jq

      - name: Docker - bootstrap build container
        run: |
          docker exec multiarch apt-get update
          docker exec multiarch apt-get -y upgrade

      - name: Docker - bootstrap build tools
        run: docker exec multiarch apt-get install -y git autoconf libtool crossbuild-essential-${{ matrix.arch }}

      - name: Docker - jq - autoreconf
        run: |
          docker exec -w /root/jq multiarch git config --global --add safe.directory /root/jq
          docker exec -w /root/jq multiarch autoreconf -i

      - name: Docker - jq - configure
        run: >
          docker exec -w /root/jq multiarch ./configure
          --host=${{ matrix.CC }}
          --disable-docs
          --disable-maintainer-mode
          --disable-valgrind
          --with-oniguruma=builtin
          --enable-static
          --enable-all-static

      - name: Docker - jq - make
        run: docker exec -w /root/jq multiarch make -j$(nproc)

      - name: Host - jq - copy and rename
        run: docker exec -w /root/jq multiarch cp -f jq /root/jq-${{ matrix.arch }}

      - name: Host - jq - version to file
        id: version_info
        run: |
          docker exec -w /root/jq multiarch bash -c './scripts/version > /root/jq_version'
          echo "jq_version=$(cat jq_version)" > $GITHUB_OUTPUT

      - name: Host - file jq
        run: file jq-${{ matrix.arch }}

      - name: Docker - upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "jq-${{ matrix.arch }}"
          path: "jq-${{ matrix.arch }}"

  release:
    name: Upload artifacts to release
    runs-on: ubuntu-latest
    needs: cross_build
    if: always() && contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    env:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      jq_version: ${{ needs.cross_build.outputs.jq_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Host - Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: test

      - name: Host - "Create release - tag - assets"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: test/jq-*
          replacesArtifacts: true
          tag: ${{ env.jq_version }}
          name: "jq ${{ env.jq_version }}"
          body: "jq built from github master and statically linked"
          allowUpdates: true
